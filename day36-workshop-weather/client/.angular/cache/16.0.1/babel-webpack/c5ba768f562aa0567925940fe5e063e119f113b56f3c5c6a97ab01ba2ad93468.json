{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpParams } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst url = '/api/weather';\n//const url = \"https://api.openweathermap.org/data/2.5/weather?q=Singapore&appid=d2c10dba6e897642d5f2d6346712e749\";\nclass WeatherService {\n  constructor(http) {\n    this.http = http;\n    //API_KEY = \"d2c10dba6e897642d5f2d6346712e749\";\n    this.activatedRoute = inject(ActivatedRoute);\n  }\n  getWeather(city, units = 'metric') {\n    const params = new HttpParams().set('units', units).set('city', city);\n    return this.http.get(url, {\n      params\n    });\n  }\n}\nWeatherService.ɵfac = function WeatherService_Factory(t) {\n  return new (t || WeatherService)(i0.ɵɵinject(i1.HttpClient));\n};\nWeatherService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WeatherService,\n  factory: WeatherService.ɵfac,\n  providedIn: 'root'\n});\nexport { WeatherService };","map":{"version":3,"names":["inject","HttpParams","ActivatedRoute","url","WeatherService","constructor","http","activatedRoute","getWeather","city","units","params","set","get","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\super\\OneDrive\\Desktop\\revision\\weather\\src\\app\\weather.service.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { City } from './models';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\n\nconst url = '/api/weather';\n\n//const url = \"https://api.openweathermap.org/data/2.5/weather?q=Singapore&appid=d2c10dba6e897642d5f2d6346712e749\";\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherService {\n\n//API_KEY = \"d2c10dba6e897642d5f2d6346712e749\";\n activatedRoute = inject(ActivatedRoute);\n\n  constructor(private http: HttpClient) { }\n\n\n  getWeather(city: string, units='metric'): Observable<City[]> {\n    const params = new HttpParams()\n    .set('units', units)\n    .set('city', city);\n\n    return this.http.get<City[]>(url, { params});\n  }\n\n\n}\n"],"mappings":"AAAA,SAAqBA,MAAM,QAAQ,eAAe;AAClD,SAAqBC,UAAU,QAAQ,sBAAsB;AAG7D,SAASC,cAAc,QAAQ,iBAAiB;;;AAEhD,MAAMC,GAAG,GAAG,cAAc;AAE1B;AAGA,MAGaC,cAAc;EAKzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAH1B;IACC,KAAAC,cAAc,GAAGP,MAAM,CAACE,cAAc,CAAC;EAEE;EAGxCM,UAAUA,CAACC,IAAY,EAAEC,KAAK,GAAC,QAAQ;IACrC,MAAMC,MAAM,GAAG,IAAIV,UAAU,EAAE,CAC9BW,GAAG,CAAC,OAAO,EAAEF,KAAK,CAAC,CACnBE,GAAG,CAAC,MAAM,EAAEH,IAAI,CAAC;IAElB,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAASV,GAAG,EAAE;MAAEQ;IAAM,CAAC,CAAC;EAC9C;;AAdWP,cAAc,C;mBAAdA,cAAc,EAAAU,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAdb,cAAc,C;SAAdA,cAAc;EAAAc,OAAA,EAAdd,cAAc,CAAAe,IAAA;EAAAC,UAAA,EAFb;AAAM;SAEPhB,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}