{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { inject } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/material/button\";\nimport * as i3 from \"@angular/material/input\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/forms\";\nfunction ThoughtsComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7)(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const t_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(t_r1);\n  }\n}\nclass ThoughtsComponent {\n  constructor() {\n    this.onThought = new Subject();\n    this.fb = inject(FormBuilder);\n  }\n  ngOnInit() {\n    this.thoughtsForm = this.fb.group({\n      thought: this.fb.control('', [Validators.required])\n    });\n  }\n  clearForm() {\n    this.thoughtsForm.reset();\n  }\n  onSubmit() {\n    const thought = this.thoughtsForm.value;\n    this.thoughtsArray.push(thought);\n  }\n}\nThoughtsComponent.ɵfac = function ThoughtsComponent_Factory(t) {\n  return new (t || ThoughtsComponent)();\n};\nThoughtsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ThoughtsComponent,\n  selectors: [[\"app-thoughts\"]],\n  outputs: {\n    onThought: \"onThought\"\n  },\n  decls: 11,\n  vars: 2,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"grid-container\"], [\"appearance\", \"outline\"], [\"type\", \"text\", \"matInput\", \"\", \"placeholder\", \"Type here\", \"formControlName\", \"thought\"], [\"mat-stroked-button\", \"\", 3, \"click\"], [\"type\", \"submit\", \"mat-stroked-button\", \"\"], [\"formArrayName\", \"thoughtsArray\", 4, \"ngFor\", \"ngForOf\"], [\"formArrayName\", \"thoughtsArray\"]],\n  template: function ThoughtsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function ThoughtsComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"mat-form-field\", 2)(3, \"mat-label\");\n      i0.ɵɵtext(4, \"My Thoughts\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"textarea\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"button\", 4);\n      i0.ɵɵlistener(\"click\", function ThoughtsComponent_Template_button_click_6_listener() {\n        return ctx.clearForm();\n      });\n      i0.ɵɵtext(7, \" Clear \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"button\", 5);\n      i0.ɵɵtext(9, \" Share \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtemplate(10, ThoughtsComponent_div_10_Template, 3, 1, \"div\", 6);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.thoughtsForm);\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngForOf\", ctx.thoughtsArray.controls);\n    }\n  },\n  dependencies: [i1.NgForOf, i2.MatButton, i3.MatInput, i4.MatFormField, i4.MatLabel, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.FormGroupDirective, i5.FormControlName, i5.FormArrayName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\n__decorate([InputDeviceInfo()], ThoughtsComponent.prototype, \"thoughtsForm\", void 0);\nexport { ThoughtsComponent };","map":{"version":3,"names":["inject","FormBuilder","Validators","Subject","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","t_r1","ThoughtsComponent","constructor","onThought","fb","ngOnInit","thoughtsForm","group","thought","control","required","clearForm","reset","onSubmit","value","thoughtsArray","push","selectors","outputs","decls","vars","consts","template","ThoughtsComponent_Template","rf","ctx","ɵɵlistener","ThoughtsComponent_Template_form_ngSubmit_0_listener","ɵɵelement","ThoughtsComponent_Template_button_click_6_listener","ɵɵtemplate","ThoughtsComponent_div_10_Template","ɵɵproperty","controls","__decorate","InputDeviceInfo"],"sources":["C:\\Users\\super\\OneDrive\\Desktop\\day33\\src\\app\\thoughts\\thoughts.component.ts","C:\\Users\\super\\OneDrive\\Desktop\\day33\\src\\app\\thoughts\\thoughts.component.html"],"sourcesContent":["import { Component, Output, inject } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'app-thoughts',\n  templateUrl: './thoughts.component.html',\n  styleUrls: ['./thoughts.component.css']\n})\nexport class ThoughtsComponent {\n  @Output() onThought = new Subject<string>()\n  @InputDeviceInfo()\n  thoughtsForm!: FormGroup\n  thoughtsArray!: FormArray\n  fb: FormBuilder = inject(FormBuilder)\n\n\nngOnInit(): void {\n    this.thoughtsForm = this.fb.group({\n      thought: this.fb.control('', [Validators.required]),\n      \n    })\n\n}\n\n\n  clearForm() {\n  this.thoughtsForm.reset();\n  }\n\n  onSubmit() {\n    const thought = this.thoughtsForm.value\n    this.thoughtsArray.push(thought)\n  }\n\n}\n\n\n","<form [formGroup]=\"thoughtsForm\" (ngSubmit)=\"onSubmit()\">\n    <div class=\"grid-container\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>My Thoughts</mat-label>\n        <textarea  type=\"text\" matInput placeholder=\"Type here\" formControlName=\"thought\"></textarea>\n      </mat-form-field>\n      <button mat-stroked-button (click)=\"clearForm()\">\n        Clear\n      </button>\n      <button type=\"submit\" mat-stroked-button >\n        Share\n      </button>\n  </div>\n  </form>\n\n  <div  formArrayName=\"thoughtsArray\" *ngFor=\"let t of thoughtsArray.controls\">\n    <p>{{ t }}</p>\n  </div>"],"mappings":";AAAA,SAA4BA,MAAM,QAAQ,eAAe;AACzD,SAAoBC,WAAW,EAAaC,UAAU,QAAQ,gBAAgB;AAC9E,SAASC,OAAO,QAAQ,MAAM;;;;;;;;;ICa5BC,EAAA,CAAAC,cAAA,aAA6E;IACxED,EAAA,CAAAE,MAAA,GAAO;IAAAF,EAAA,CAAAG,YAAA,EAAI;;;;IAAXH,EAAA,CAAAI,SAAA,GAAO;IAAPJ,EAAA,CAAAK,iBAAA,CAAAC,IAAA,CAAO;;;ADZd,MAKaC,iBAAiB;EAL9BC,YAAA;IAMY,KAAAC,SAAS,GAAG,IAAIV,OAAO,EAAU;IAI3C,KAAAW,EAAE,GAAgBd,MAAM,CAACC,WAAW,CAAC;;EAGvCc,QAAQA,CAAA;IACJ,IAAI,CAACC,YAAY,GAAG,IAAI,CAACF,EAAE,CAACG,KAAK,CAAC;MAChCC,OAAO,EAAE,IAAI,CAACJ,EAAE,CAACK,OAAO,CAAC,EAAE,EAAE,CAACjB,UAAU,CAACkB,QAAQ,CAAC;KAEnD,CAAC;EAEN;EAGEC,SAASA,CAAA;IACT,IAAI,CAACL,YAAY,CAACM,KAAK,EAAE;EACzB;EAEAC,QAAQA,CAAA;IACN,MAAML,OAAO,GAAG,IAAI,CAACF,YAAY,CAACQ,KAAK;IACvC,IAAI,CAACC,aAAa,CAACC,IAAI,CAACR,OAAO,CAAC;EAClC;;AAxBWP,iBAAiB,C;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB,C;QAAjBA,iBAAiB;EAAAgB,SAAA;EAAAC,OAAA;IAAAf,SAAA;EAAA;EAAAgB,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,2BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCT9B9B,EAAA,CAAAC,cAAA,cAAyD;MAAxBD,EAAA,CAAAgC,UAAA,sBAAAC,oDAAA;QAAA,OAAYF,GAAA,CAAAZ,QAAA,EAAU;MAAA,EAAC;MACpDnB,EAAA,CAAAC,cAAA,aAA4B;MAEbD,EAAA,CAAAE,MAAA,kBAAW;MAAAF,EAAA,CAAAG,YAAA,EAAY;MAClCH,EAAA,CAAAkC,SAAA,kBAA6F;MAC/FlC,EAAA,CAAAG,YAAA,EAAiB;MACjBH,EAAA,CAAAC,cAAA,gBAAiD;MAAtBD,EAAA,CAAAgC,UAAA,mBAAAG,mDAAA;QAAA,OAASJ,GAAA,CAAAd,SAAA,EAAW;MAAA,EAAC;MAC9CjB,EAAA,CAAAE,MAAA,cACF;MAAAF,EAAA,CAAAG,YAAA,EAAS;MACTH,EAAA,CAAAC,cAAA,gBAA0C;MACxCD,EAAA,CAAAE,MAAA,cACF;MAAAF,EAAA,CAAAG,YAAA,EAAS;MAIbH,EAAA,CAAAoC,UAAA,KAAAC,iCAAA,iBAEM;;;MAjBFrC,EAAA,CAAAsC,UAAA,cAAAP,GAAA,CAAAnB,YAAA,CAA0B;MAeoBZ,EAAA,CAAAI,SAAA,IAAyB;MAAzBJ,EAAA,CAAAsC,UAAA,YAAAP,GAAA,CAAAV,aAAA,CAAAkB,QAAA,CAAyB;;;;;;ADH3EC,UAAA,EADCC,eAAe,EAAE,C,sDACM;SAHblC,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}