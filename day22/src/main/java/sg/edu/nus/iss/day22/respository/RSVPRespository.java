package sg.edu.nus.iss.day22.respository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.stereotype.Repository;

import sg.edu.nus.iss.day22.model.RSVP;

import static sg.edu.nus.iss.day22.respository.DBQueries.*;

import java.math.BigInteger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@Repository
public class RSVPRespository {
    
    @Autowired
    JdbcTemplate jdbcTemplate;

    // fetch all rsvp
    public List<RSVP> getAllRSVP(){
        List<RSVP> rsvps = new ArrayList<RSVP>();
        SqlRowSet rs = null;

        rs = jdbcTemplate.queryForRowSet(SELECT_ALL_RSVP);
        while(rs.next())
            rsvps.add(RSVP.create(rs));
            return rsvps;
        
    }

    //get rsvp by name  like "%name%"
    public List<RSVP> getRSVPByName(String name){
        List<RSVP> rsvps = new ArrayList<RSVP>();
        SqlRowSet rs = null;

        rs = jdbcTemplate.queryForRowSet(SELECT_RSVP_BY_NAME, new Object[] {"%" + name + "%"});

        while (rs.next())
            rsvps.add(RSVP.create(rs));
        
        return rsvps;
    }

    // get rsvp by email / email = ?
    private RSVP getRSVPByEmail(String email){
        List<RSVP> rsvpList = new ArrayList<>();
        SqlRowSet rs = jdbcTemplate.queryForRowSet(SELECT_RSVP_BY_EMAIL, email);

        System.out.println("checking resultset ----> " + Objects.isNull(rs));
        
        while (rs.next()){
            System.out.println("inside while loop");
            rsvpList.add(RSVP.create(rs));
        }
      
        System.out.println("size of rsvp list ---> " + rsvpList.size());
        if (rsvpList.size() == 0)
        return null;

        
            return rsvpList.get(0);
    }


    // create rsvp
    public RSVP createRsvp(RSVP rsvp){
        //  generate primary key id for  new rsvp in table
        KeyHolder keyHolder = new GeneratedKeyHolder();

        RSVP existingRSVP = getRSVPByEmail(rsvp.getEmail());

        // no email found in database, create new rsvp
        if (Objects.isNull(existingRSVP)){
            // insert record, template.update supports the retrieval of primary keys generated by the database
          jdbcTemplate.update(conn -> {
            PreparedStatement statement = conn.prepareStatement(INSERT_NEW_RSVP, Statement.RETURN_GENERATED_KEYS);

            statement.setString(1, rsvp.getName());
            statement.setString(2, rsvp.getEmail());
            statement.setString(3, rsvp.getPhone());
            statement.setTimestamp(4, new Timestamp(rsvp.getConfirmationDate().toDateTime().getMillis()));
            statement.setString(5, rsvp.getComments());
            return statement;
        }, keyHolder);
               
          
           // get value of generated key id
            BigInteger primaryKey = (BigInteger) keyHolder.getKey();


            rsvp.setId(primaryKey.intValue());

        }else {
            // if rsvp exists
            // update existing record
            existingRSVP.setName(rsvp.getName());
            existingRSVP.setPhone((rsvp.getPhone()));
            existingRSVP.setConfirmationDate(rsvp.getConfirmationDate());
            existingRSVP.setComments(rsvp.getComments());

            boolean isUpdated = updateRSVP(existingRSVP);

            if (isUpdated){
                rsvp.setId(existingRSVP.getId());
            }
        }
        return rsvp;  // return id of new or updated rsvp in json
    }

    // update record
    public boolean updateRSVP(RSVP existingRSVP){
        return jdbcTemplate.update(UPDATE_RSVP_BY_EMAIL,
        existingRSVP.getName(),
        existingRSVP.getPhone(),
        new Timestamp(existingRSVP.getConfirmationDate().toDateTime().getMillis()),
        existingRSVP.getComments(),
        existingRSVP.getEmail()) > 0;
    }

    // get rsvp total count
    public Long getTotalRSVPCount(){
        List<Map<String, Object>> rows = jdbcTemplate.queryForList(TOTAL_RSVP_COUNT);
        return (Long) rows.get(0).get("total_count");
    }

   
}
